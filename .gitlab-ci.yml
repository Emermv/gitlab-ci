# Define the stages of the pipeline
stages:
  - test
  - build
  - notify
  - push-and-deploy
# Test stage
test:
  stage: test
  image: golang:latest
  before_script:
    - go install github.com/jstemmer/go-junit-report@latest  # Install go-junit-report  
  script:
    - echo "Running tests..."
    - cd src
    - go mod download
    - go test ./... -v | go-junit-report > test-report.xml  # Run tests and create JUnit report
    - mv test-report.xml ../test-report.xml  # Move the report to the root directory
  artifacts:
    reports:
      junit: test-report.xml  # Store test results as artifacts
    paths:
      - test-report.xml       # Ensure the report is uploaded as an artifact
  only:
    - master

push-to-ecr-and-deploy:
  stage: push-and-deploy
  image: docker:latest
  services:
    - docker:dind
  variables:
    DOCKER_HOST: tcp://docker:2375  # Connect to the Docker daemon on TCP
    DOCKER_TLS_CERTDIR: ""  # Disable Docker TLS (required for dind)
    IMAGE_NAME: "go"
    FUNCTION_NAME: "go-lambda"  
    AWS_REGION: "us-east-1"
    ECR_REGISTRY: "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"  # ECR Registry URL
    ECR_REPOSITORY: "${AWS_ECR_REPOSITORY}"
    IMAGE_TAG: "${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_NAME}-${CI_COMMIT_SHORT_SHA}"
  before_script:
    - apk add --no-cache curl aws-cli  # Install AWS CLI directly via apk
    - aws --version  # Confirm installation
    - aws configure set aws_access_key_id "$AWS_ACCESS_KEY_ID"
    - aws configure set aws_secret_access_key "$AWS_SECRET_ACCESS_KEY"
    - aws configure set region "$AWS_REGION"
    # Login to ECR with a direct pipe
    - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY
  script:
    - docker build --platform linux/amd64 -t $IMAGE_TAG .  # Build the Docker image
    - docker push $IMAGE_TAG  # Push the image to ECR
    # - aws lambda create-function --function-name $FUNCTION_NAME --package-type Image --code ImageUri=$IMAGE_TAG --role arn:aws:iam::${AWS_ACCOUNT_ID}:role/go-lambda-ex
    - aws lambda update-function-code --function-name $FUNCTION_NAME --image-uri $IMAGE_TAG --publish
    - aws lambda invoke --function-name $FUNCTION_NAME response.json    
  only:
    - main
  # needs:
    # - test
# Docker build stage
build-image:
  stage: build
  image: docker:latest
  needs:
    - test
  services:
    - docker:dind  # Docker-in-Docker service required to build images
  variables:
    DOCKER_DRIVER: overlay2  # Specify the Docker storage driver
    IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHORT_SHA
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"  # Login to GitLab Container Registry
  script:
    - docker build -t $IMAGE_TAG .  # Build the Docker image with the current commit slug as the tag
    - docker push $IMAGE_TAG
  after_script:
    - echo $CI_JOB_STATUS > build_status.txt  # Save the build status to a file for later stages
  artifacts:
    paths:
      - build_status.txt  # Store the file as an artifact for use in later stages    
  only:
    - master  # Only run this job on the main branch
  # tags:
  #   - docker  # Optional: Define tags to specify runners with Docker capabilities
send-notification:
  stage: notify
  image: curlimages/curl:latest  # Use a lightweight curl image
  variables:
    BOT_TOKEN: ${CI_SECRET_BOT_TOKEN}  # Define your secret token in GitLab CI/CD settings
    TELEGRAM_CHAT_ID: "-1001929173409"  # Telegram chat ID
    COMMIT_MESSAGE: $CI_COMMIT_MESSAGE  # Get the commit message
  script:
    - BUILD_STATUS=$(cat build_status.txt)  # Read the build status from the artifact  
    - |
      if [ "$BUILD_STATUS" == "success" ]; then
        STATUS="SUCCESSFUL"
      else
        STATUS="FAILED"
      fi

      MESSAGE="Deployment of '$CI_PROJECT_NAME' with commit '$COMMIT_MESSAGE' was: $STATUS"
      
      curl -X POST \
        https://api.telegram.org/bot${BOT_TOKEN}/sendMessage \
        -H 'Content-Type: application/json' \
        -d "{\"chat_id\": \"${TELEGRAM_CHAT_ID}\", \"text\": \"$MESSAGE\"}"
  # artifacts:
  #   when: on_failure  # Only send notification if build or push stage fails        
  only:
    - master  # Only run this job on the main branch
  needs:
    - build-image  # Ensure this stage depends on the previous one
